// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.IO;
using DS_Wortschatz._Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DS_Wortschatz.Models;

public partial class DS_WortschatzDBContext : DbContext
{
    public DS_WortschatzDBContext()
    {
    }

    public DS_WortschatzDBContext(DbContextOptions<DS_WortschatzDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AdminGame> AdminGames { get; set; }

    public virtual DbSet<Artikel> Artikels { get; set; }

    public virtual DbSet<ArtikelD> ArtikelDs { get; set; }

    public virtual DbSet<Stat> Stats { get; set; }

    public virtual DbSet<Worter> Worters { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            var connectionString = AppConfig.Configuration.GetConnectionString("DS_WortschatzSQL");
            optionsBuilder.UseSqlServer(connectionString);
        }
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        //=> optionsBuilder.UseSqlServer("Data Source=trzaj\\dsw_sql;Initial Catalog=DS_WortschatzSQL;Integrated Security=True;Encrypt=False");

    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IsAdmin).HasColumnName("isAdmin");
            entity.Property(e => e.Password).IsRequired();
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AdminGame>(entity =>
        {
            entity.ToTable("AdminGame");

            entity.Property(e => e.DartikelId).HasColumnName("DArtikelId");
            entity.Property(e => e.SartikelId).HasColumnName("SArtikelId");
        });

        modelBuilder.Entity<Artikel>(entity =>
        {
            entity.HasKey(e => e.IdS).HasName("PK_ArtikleS");

            entity.ToTable("ArtikelS");

            entity.Property(e => e.IdS).ValueGeneratedNever();
            entity.Property(e => e.TajTaTo)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ArtikelD>(entity =>
        {
            entity.ToTable("ArtikelD");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DerDieDas)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Stat>(entity =>
        {
            entity.HasKey(e => e.Uid);

            entity.Property(e => e.Uid)
                .ValueGeneratedNever()
                .HasColumnName("UId");
            entity.Property(e => e.PlayLast).HasColumnType("date");
        });

        modelBuilder.Entity<Worter>(entity =>
        {
            entity.HasKey(e => e.Idw);

            entity.ToTable("Worter");

            entity.Property(e => e.Idw).HasColumnName("IDW");
            entity.Property(e => e.DartikelId).HasColumnName("DArtikelID");
            entity.Property(e => e.Deutsch)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SartikelId).HasColumnName("SArtikelID");
            entity.Property(e => e.Serbisch)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Dartikel).WithMany(p => p.Worters)
                .HasForeignKey(d => d.DartikelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worter_ArtikelD");

            entity.HasOne(d => d.Sartikel).WithMany(p => p.Worters)
                .HasForeignKey(d => d.SartikelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Worter_ArtikelS");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}